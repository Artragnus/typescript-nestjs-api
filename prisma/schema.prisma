// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @unique @default(uuid())
  email      String       @unique
  name       String       @db.VarChar(255)
  password   String
  createdAt  DateTime     @default(now())
  accounts   Account[]
  Expense    Expense[]
  Income     Income[]
  CreditCard CreditCard[]

  @@map("users")
}

model AccountCategory {
  id          Int       @id @unique @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?   @db.Text()
  accounts    Account[]

  @@map("account_categories")
}

model Account {
  id          String          @id @unique @default(uuid())
  balance     Int             @default(0)
  description String          @db.Text()
  category    AccountCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime        @default(now())
  Expense     Expense[]
  Income      Income[]
  CreditCard  CreditCard[]

  @@map("accounts")
}

model ExpenseCategory {
  id          Int       @id @unique @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?   @db.Text()
  Expense     Expense[]

  @@map("expense_categories")
}

model Expense {
  id          String          @id @unique @default(uuid())
  amount      Int
  date        DateTime        @default(now())
  description String          @db.Text()
  category    ExpenseCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  account     Account         @relation(fields: [accountId], references: [id])
  accountId   String
  user        User            @relation(fields: [userId], references: [id])
  userId      String

  @@map("expenses")
}

model IncomeCategory {
  id          Int      @id @unique @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?  @db.Text()
  Income      Income[]

  @@map("income_categories")
}

model Income {
  id          String         @id @unique @default(uuid())
  amount      Int
  date        DateTime       @default(now())
  description String         @db.Text()
  category    IncomeCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  account     Account        @relation(fields: [accountId], references: [id])
  accountId   String
  user        User           @relation(fields: [userId], references: [id])
  userId      String

  @@map("incomes")
}

model CreditCard {
  id          String   @id @unique @default(uuid())
  limit       Int
  description String   @db.Text()
  closingDay  Int
  dueDate     Int
  Account     Account? @relation(fields: [accountId], references: [id])
  accountId   String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@map("credit_cards")
}
